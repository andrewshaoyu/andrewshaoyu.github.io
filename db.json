{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-ayer/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","path":"css/custom.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","path":"dist/main.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","path":"dist/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","path":"images/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","path":"images/ayer.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","path":"images/beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","path":"images/forkme.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","path":"js/dz.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/ServiceMesh-istio-control-plane-1.md","hash":"1fecc790400c859cc74f0539a201f9f096f81de8","modified":1619344792378},{"_id":"node_modules/hexo-theme-ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.postcssrc","hash":"c171a60205840e3dcd3825d5bbb6b2d19d48ee76","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/README.md","hash":"c0c6c11afaa02819dd98faa9f14ed07c8fa3c22e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/package.json","hash":"42b5fbcd19947024773978c8341496f69ed3611b","modified":1619056674045},{"_id":"node_modules/hexo-theme-ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/de.yml","hash":"7b516d228f6175a079e260f1d5eb105644bacd15","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/en.yml","hash":"44e16cb5f43b5e17521a052d36fb7f66faf80c95","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/default.yml","hash":"44e16cb5f43b5e17521a052d36fb7f66faf80c95","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/fr.yml","hash":"deb03585d492faac20c360b3d96a1a7331dc0f78","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/es.yml","hash":"7d44c39c9ab9c6f0b2e592e9f02a0b6b1b35daa8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ko.yml","hash":"6d645ed779b8427e5bb5c87c5989f3013c613baf","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ja.yml","hash":"e6849a6c716b588bb17e19f72a61965c74570421","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ru.yml","hash":"22f2e2310d7025b03950f450865a6c3ae66fe677","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/pt.yml","hash":"8ec0eacefc2ca124bafc86fe4fb23bd2b9cad8ab","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/nl.yml","hash":"86518a4aa58bdbd57361eb2340b2d5e9a684a035","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/zh-TW.yml","hash":"68ddd866f1e74515cfe92faa5a37a067d9308142","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/zh-CN.yml","hash":"14d1fa64b52a252e2ed54a682c5d47b128780dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/no.yml","hash":"2faf5999099765bd662d0979e35e0d43d06bd63c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/vi.yml","hash":"768ed9dc0161990dcdfdc4054ec281dda4d7a33e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/layout.ejs","hash":"ff1211ce5ce406c177c4a6e158e0f72ab5ebdbb6","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/404.html","hash":"727bb80b870df99b9d816f36613fc6eae4c61c98","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/after-footer.ejs","hash":"10c5e663f58245f63bad8d8f017dba237c667624","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/main.js","hash":"e42992bf24b2864e33ea5fdfab122b5d41851066","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ayer.ejs","hash":"061e5d25789c9a0c3df3172c0c53966053af89d1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/article.ejs","hash":"ff1f8fd0dce22409038e72097a9582d1bbf4e6e0","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/head.ejs","hash":"8081db5b9801f32773632c10fa169c34e1a82ba2","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/katex.ejs","hash":"02cb9da065cd315a06d62d13872dc687c62e9a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/viewer.ejs","hash":"219f0a0ec2eb35e8ba27a849639a5f634273fb6f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/mathjax.ejs","hash":"bcc264b6d6b58b3b692139c4d8b1381da4820da8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/totop.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","hash":"6f43d2b89beb684f020f80dd1a0952f4f6ee3659","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","hash":"ddee860717697321d9a96464c9179fdca00327a5","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","hash":"daac19b1cf7381f1a36deb6ac5a4892e14774887","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","hash":"fd61d8aeb2cfeaa0e548ac83a1ee1631979cbdb9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_remixicon.styl","hash":"78f4dd8c613df005d6ecf6a073d96d38bbbe531e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/style.styl","hash":"89dfb772754ee919cb157a6e28d61bbabfe46c8d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/js/ayer.js","hash":"507e9689b119898dea446c7d583245ff41412b89","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/clipboard.ejs","hash":"c93d82de1635536a633b6254b604590ab4428594","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gitalk.ejs","hash":"c81d54a9d818fa21ebcab03cfecc3528821ff9a5","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/minivaline.ejs","hash":"bc41af88b2b85f638ab7bd4cf0b227510ccb0108","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/twikoo.ejs","hash":"7f064611a2297dda84e6b329252e838666ac7c93","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/valine.ejs","hash":"b71f2af08c1916b3c5ef3a553a1df16f1787af24","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/article.styl","hash":"71f997526aa67d312c26a84393f43a4157447eaf","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ayer.styl","hash":"cfcae3839170f2d04ea504a3cd3d62a9cde6647d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/navbar.styl","hash":"30d7e1de22185c4b4da33eef66b5eb96f9e5ae98","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tocbot.styl","hash":"2135ab02e098ddfaaa60009d8413186a564af840","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-2.0.3.min.js","hash":"e68550a39c95a6400287b3abd77f40c44f322e50","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1619032697024},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1619032697024},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1619032697024},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1619032697024},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1619032697024},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1619032697024},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1619032697024},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1619032697024},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1619032697024},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1619032697024},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1619032697024},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1619032697024},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1619032697024},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1619032697024},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1619032697024},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1619032697024},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1619032697024},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1619032697024},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1619032697024},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1619032697024},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1619032697024},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1619032697024},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1619032697024},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1619032697024},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1619032697024},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1619032697024},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1619032697024},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1619032697024},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1619032697024},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1619032697024},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1619032697024},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1619032697028},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1619032697032},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1619032697032},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1619032697032},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1619032697032},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1619032697032},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1619032697036},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1619032697036},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1619032697036},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1619032697032},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1619032697036},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1619032697024},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1619032697024},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1619032697024},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1619032697024},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1619032697032},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1619032697024},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1619032697024},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1619032697028},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1619032697028},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1619032697028},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1619032697024},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1619032697028},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1619032697028},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1619032697028},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1619032697028},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1619032697028},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1619032697032},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1619032697036},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1619032697036},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1619032697036},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1619032697024},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1619032697036},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1619032697036},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1619032697036},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1619032697032},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1619032697028},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1619032697032},{"_id":"source/_posts/ServiceMesh-istio-control-plane-2.md","hash":"861f818766bc2ff1eb7551c2bc3c3fc840105776","modified":1619345458466}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"ServiceMesh之istio控制面一","date":"2021-04-21T19:24:35.000Z","_content":"\n## istio对象\n\n1. Gateway\n\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\n  name: shaoyu-test\n  namespace: shaoyu\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - www.example.com\n    port:\n      name: example-gw\n      number: 8080\n      protocol: HTTP\n  - hosts:\n    - api.example.com\n    port:\n      name: example-api-gw\n      number: 8080\n      protocol: HTTP\n```\n\n1. VirtualService\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: vs-www.example.com\n  namespace: shaoyu\nspec:\n  gateways:\n  - shaoyu-test\n  hosts:\n  - www.example.com\n  http:\n  - match:\n    - ignoreUriCase: true\n      port: 8080\n      uri:\n        prefix: /\n    name: example-app\n    route:\n    - destination:\n        host: example-app-cluster\n        port:\n          number: 8080\n    timeout: 120s\n```\n\n### envoy对象\n\n1. [config.listener.v3.listener]([https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#config-listener-v3-listener](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#config-listener-v3-listener))\n\n```json\n{\n    \"name\": \"0.0.0.0_8080\",\n    \"active_state\": {\n        \"version_info\": \"2021-04-21T10:28:45Z/16403\",\n        \"listener\": {\n            \"@type\": \"type.googleapis.com/envoy.config.listener.v3.Listener\",\n            \"name\": \"0.0.0.0_8080\"\n        },\n        \"address\": {\n            \"socket_address\": {\n                \"address\": \"0.0.0.0\",\n                \"port_value\": 8080\n            }\n        }\n    }\n}\n```\n\n2. [config.route.v3.RouteConfiguration]([https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-v3-api-msg-config-route-v3-routeconfiguration](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-v3-api-msg-config-route-v3-routeconfiguration))\n\n```json\n{\n    \"version_info\": \"2021-04-21T11:31:14Z/18732\",\n    \"route_config\": {\n        \"@type\": \"type.googleapis.com/envoy.config.route.v3.RouteConfiguration\",\n        \"name\": \"http.8080\",\n        \"virtual_hosts\": [\n            {\n                \"name\": \"www.example.org:8080\",\n                \"domains\": [\n                    \"www.example.org\",\n                    \"www.example.org:*\"\n                ],\n                \"routes\": [\n                    {\n                        \"match\": {\n                            \"prefix\": \"/\",\n                            \"case_sensitive\": false\n                        },\n                        \"route\": {\n                            \"cluster\": \"outbound|8080||example-app-cluster\",\n                            \"timeout\": \"120s\",\n                            \"max_grpc_timeout\": \"120s\"\n                        },\n                        \"name\": \"route-example-app\"\n                    }\n                ],\n                \"include_request_attempt_count\": true\n            }\n        ]\n    }\n}\n```\n\n## LDS源码分析\n\n```go\nfunc (s *DiscoveryServer) pushLds(con *Connection, push *model.PushContext, version string) error {\n\trawListeners := s.ConfigGenerator.BuildListeners(con.node, push)\n\tresponse := ldsDiscoveryResponse(rawListeners, version, push.Version, con.node.RequestedTypes.LDS)\n\terr := con.send(response)\n\tif err != nil {\n\t\trecordSendError(\"LDS\", con.ConID, ldsSendErrPushes, err)\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n### BuildListeners\n\n1. 遍历node.mergedGatewy.Servers\n2. 获取到port.number，生成config.listener.v3.listener\n3. 推送给node\n\n## RDS源码分析\n\n```go\nfunc (s *DiscoveryServer) pushRoute(con *Connection, push *model.PushContext, version string) error {\n\tpushStart := time.Now()\n\trawRoutes := s.ConfigGenerator.BuildHTTPRoutes(con.node, push, con.Routes())\n\t/*\n\ttip: con.Route()就是route_config.name的集合\n\thttp.8080的virtual_hosts的集合中每个子项对应约等于gateway中server.hosts(这个是近似，在处理的过程会对泛域名进行处理)。\n\thttps的server，每一个server对应一个route_config。\n\tcon.Route()的数量就对应下发给envoy的route_config的数量。\n\t*/\n\tresponse := routeDiscoveryResponse(rawRoutes, version, push.Version, con.node.RequestedTypes.RDS)\n\terr := con.send(response)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n```go\n//遍历routeNames生成对应的routeConfig，针对每一个routeConfig patch envoyfilter\nfor _, routeName := range routeNames {\n\trc := configgen.buildGatewayHTTPRouteConfig(node, push, routeName)\n\tif rc != nil {\n\t\trc = envoyfilter.ApplyRouteConfigurationPatches(networking.EnvoyFilter_GATEWAY, node, push, rc)\n\t} else {\n\t\trc = &route.RouteConfiguration{\n\t\t\tName:             routeName,\n\t\t\tVirtualHosts:     []*route.VirtualHost{},\n\t\t\tValidateClusters: proto.BoolFalse,\n\t\t}\n\t}\n\trouteConfigurations = append(routeConfigurations, rc)\n}\n```\n\n```go\nfunc (configgen *ConfigGeneratorImpl) buildGatewayHTTPRouteConfig(node *model.Proxy, push *model.PushContext,\n\trouteName string) *route.RouteConfiguration {\n\tmerged := node.MergedGateway\n\t// 根据routeName获取到所有的server，就是gateway的中所有的server\n\tservers := merged.ServersByRouteName[routeName]\n        // routeName的划分，就是按照port来的，所以一个routeName中所有的server都是同一个port\n\tport := int(servers[0].Port.Number)\n\n\tnameToServiceMap := push.ServiceByHostname\n\t// envoy的route_config virtual_host就是一组域名下，httppath指向对应envoy cluster的路由信息描述\n\t// 这个信息需要根据istio的VirtualService去生成\n\tvHostDedupMap := make(map[host.Name]*route.VirtualHost)\n\n\t// 同一个server可能有http和https的入口，server会存在多个routeConfig中，可能会被多次命中\n\tfor _, server := range servers {\n\t\t// 根据server查询gateway，这个地方，同一个gateway可能会被多次命中\n\t\tgatewayName := merged.GatewayNameForServer[server]\n\t\t// 取出所有的virtualServices信息，需要遍历virtualService生成http路由\n\t\tvirtualServices := push.VirtualServicesForGateway(node, gatewayName)\n\t\t// 同一个vs可能被绑定到多个gateway上，也会被多次命中\n\t\tfor _, virtualService := range virtualServices {\n\t\t\tvirtualServiceHosts := host.NewNames(virtualService.Spec.(*networking.VirtualService).Hosts)\n\t\t\tserverHosts := host.NamesForNamespace(server.Hosts, virtualService.Namespace)\n\n\t\t\tintersectingHosts := serverHosts.Intersection(virtualServiceHosts)\n\t\t\t//server的host是aaa.com,但是vs是bbb.com,计算之后发现server和vs没有关联关系，所以直接continue\n\t\t\tif len(intersectingHosts) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// 生成routeConfig.VirtualHost.routes\n\t\t\troutes, err := istio_route.BuildHTTPRoutesForVirtualService(node, push, virtualService, nameToServiceMap, port, map[string]bool{gatewayName: true})\n\t\t\t// 组装routeConfig.VirtualHost\n\t\t\tfor _, hostname := range intersectingHosts {\n\t\t\t\tif vHost, exists := vHostDedupMap[hostname]; exists {\n\t\t\t\t\t// before merging this virtual service's routes, make sure that the existing one is not a tls redirect host\n\t\t\t\t\tif vHost.RequireTls == route.VirtualHost_NONE {\n\t\t\t\t\t\tvHost.Routes = append(vHost.Routes, routes...)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnewVHost := &route.VirtualHost{\n\t\t\t\t\t\tName:                       domainName(string(hostname), port),\n\t\t\t\t\t\tDomains:                    buildGatewayVirtualHostDomains(string(hostname), port),\n\t\t\t\t\t\tRoutes:                     routes,\n\t\t\t\t\t\tIncludeRequestAttemptCount: true,\n\t\t\t\t\t}\n\t\t\t\t\tvHostDedupMap[hostname] = newVHost\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tvar virtualHosts []*route.VirtualHost\n\n\tvirtualHosts = make([]*route.VirtualHost, 0, len(vHostDedupMap))\n\tfor _, v := range vHostDedupMap {\n\t\tv.Routes = istio_route.CombineVHostRoutes(v.Routes)\n\t\tvirtualHosts = append(virtualHosts, v)\n\t}\n\trouteCfg := &route.RouteConfiguration{\n\t\t// Retain the routeName as its used by EnvoyFilter patching logic\n\t\tName:             routeName,\n\t\tVirtualHosts:     virtualHosts,\n\t\tValidateClusters: proto.BoolFalse,\n\t}\n\treturn routeCfg\n}\n```\n\n# 总结\n\n### istio的Gateway和VirtualService就是envoy LDS和RDS的抽象\n\nistio的抽象更加的灵活，配置更加方便\n\n### 使用方式和rds生成的耗时探索\n\nroute_config的规模=https域名的数量+1(http.8080)\n\n以http.8080这个routeConfig为例，为了减少遍历的次数，node上的server越少越快，每个gateway对应的virtualservice越少越快\n\n每组域名生成一个Gateway对象，每一个gateway对象管理一个VirtualService。\n\n在这样场景之下，生成http.8080的routeConfig,rds生成耗时不会因为多次循环放大。\n","source":"_posts/ServiceMesh-istio-control-plane-1.md","raw":"---\ntitle: ServiceMesh之istio控制面一\ndate: 2021-04-22 03:24:35\ntags:\n---\n\n## istio对象\n\n1. Gateway\n\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\n  name: shaoyu-test\n  namespace: shaoyu\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - www.example.com\n    port:\n      name: example-gw\n      number: 8080\n      protocol: HTTP\n  - hosts:\n    - api.example.com\n    port:\n      name: example-api-gw\n      number: 8080\n      protocol: HTTP\n```\n\n1. VirtualService\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: vs-www.example.com\n  namespace: shaoyu\nspec:\n  gateways:\n  - shaoyu-test\n  hosts:\n  - www.example.com\n  http:\n  - match:\n    - ignoreUriCase: true\n      port: 8080\n      uri:\n        prefix: /\n    name: example-app\n    route:\n    - destination:\n        host: example-app-cluster\n        port:\n          number: 8080\n    timeout: 120s\n```\n\n### envoy对象\n\n1. [config.listener.v3.listener]([https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#config-listener-v3-listener](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#config-listener-v3-listener))\n\n```json\n{\n    \"name\": \"0.0.0.0_8080\",\n    \"active_state\": {\n        \"version_info\": \"2021-04-21T10:28:45Z/16403\",\n        \"listener\": {\n            \"@type\": \"type.googleapis.com/envoy.config.listener.v3.Listener\",\n            \"name\": \"0.0.0.0_8080\"\n        },\n        \"address\": {\n            \"socket_address\": {\n                \"address\": \"0.0.0.0\",\n                \"port_value\": 8080\n            }\n        }\n    }\n}\n```\n\n2. [config.route.v3.RouteConfiguration]([https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-v3-api-msg-config-route-v3-routeconfiguration](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-v3-api-msg-config-route-v3-routeconfiguration))\n\n```json\n{\n    \"version_info\": \"2021-04-21T11:31:14Z/18732\",\n    \"route_config\": {\n        \"@type\": \"type.googleapis.com/envoy.config.route.v3.RouteConfiguration\",\n        \"name\": \"http.8080\",\n        \"virtual_hosts\": [\n            {\n                \"name\": \"www.example.org:8080\",\n                \"domains\": [\n                    \"www.example.org\",\n                    \"www.example.org:*\"\n                ],\n                \"routes\": [\n                    {\n                        \"match\": {\n                            \"prefix\": \"/\",\n                            \"case_sensitive\": false\n                        },\n                        \"route\": {\n                            \"cluster\": \"outbound|8080||example-app-cluster\",\n                            \"timeout\": \"120s\",\n                            \"max_grpc_timeout\": \"120s\"\n                        },\n                        \"name\": \"route-example-app\"\n                    }\n                ],\n                \"include_request_attempt_count\": true\n            }\n        ]\n    }\n}\n```\n\n## LDS源码分析\n\n```go\nfunc (s *DiscoveryServer) pushLds(con *Connection, push *model.PushContext, version string) error {\n\trawListeners := s.ConfigGenerator.BuildListeners(con.node, push)\n\tresponse := ldsDiscoveryResponse(rawListeners, version, push.Version, con.node.RequestedTypes.LDS)\n\terr := con.send(response)\n\tif err != nil {\n\t\trecordSendError(\"LDS\", con.ConID, ldsSendErrPushes, err)\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n### BuildListeners\n\n1. 遍历node.mergedGatewy.Servers\n2. 获取到port.number，生成config.listener.v3.listener\n3. 推送给node\n\n## RDS源码分析\n\n```go\nfunc (s *DiscoveryServer) pushRoute(con *Connection, push *model.PushContext, version string) error {\n\tpushStart := time.Now()\n\trawRoutes := s.ConfigGenerator.BuildHTTPRoutes(con.node, push, con.Routes())\n\t/*\n\ttip: con.Route()就是route_config.name的集合\n\thttp.8080的virtual_hosts的集合中每个子项对应约等于gateway中server.hosts(这个是近似，在处理的过程会对泛域名进行处理)。\n\thttps的server，每一个server对应一个route_config。\n\tcon.Route()的数量就对应下发给envoy的route_config的数量。\n\t*/\n\tresponse := routeDiscoveryResponse(rawRoutes, version, push.Version, con.node.RequestedTypes.RDS)\n\terr := con.send(response)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n```go\n//遍历routeNames生成对应的routeConfig，针对每一个routeConfig patch envoyfilter\nfor _, routeName := range routeNames {\n\trc := configgen.buildGatewayHTTPRouteConfig(node, push, routeName)\n\tif rc != nil {\n\t\trc = envoyfilter.ApplyRouteConfigurationPatches(networking.EnvoyFilter_GATEWAY, node, push, rc)\n\t} else {\n\t\trc = &route.RouteConfiguration{\n\t\t\tName:             routeName,\n\t\t\tVirtualHosts:     []*route.VirtualHost{},\n\t\t\tValidateClusters: proto.BoolFalse,\n\t\t}\n\t}\n\trouteConfigurations = append(routeConfigurations, rc)\n}\n```\n\n```go\nfunc (configgen *ConfigGeneratorImpl) buildGatewayHTTPRouteConfig(node *model.Proxy, push *model.PushContext,\n\trouteName string) *route.RouteConfiguration {\n\tmerged := node.MergedGateway\n\t// 根据routeName获取到所有的server，就是gateway的中所有的server\n\tservers := merged.ServersByRouteName[routeName]\n        // routeName的划分，就是按照port来的，所以一个routeName中所有的server都是同一个port\n\tport := int(servers[0].Port.Number)\n\n\tnameToServiceMap := push.ServiceByHostname\n\t// envoy的route_config virtual_host就是一组域名下，httppath指向对应envoy cluster的路由信息描述\n\t// 这个信息需要根据istio的VirtualService去生成\n\tvHostDedupMap := make(map[host.Name]*route.VirtualHost)\n\n\t// 同一个server可能有http和https的入口，server会存在多个routeConfig中，可能会被多次命中\n\tfor _, server := range servers {\n\t\t// 根据server查询gateway，这个地方，同一个gateway可能会被多次命中\n\t\tgatewayName := merged.GatewayNameForServer[server]\n\t\t// 取出所有的virtualServices信息，需要遍历virtualService生成http路由\n\t\tvirtualServices := push.VirtualServicesForGateway(node, gatewayName)\n\t\t// 同一个vs可能被绑定到多个gateway上，也会被多次命中\n\t\tfor _, virtualService := range virtualServices {\n\t\t\tvirtualServiceHosts := host.NewNames(virtualService.Spec.(*networking.VirtualService).Hosts)\n\t\t\tserverHosts := host.NamesForNamespace(server.Hosts, virtualService.Namespace)\n\n\t\t\tintersectingHosts := serverHosts.Intersection(virtualServiceHosts)\n\t\t\t//server的host是aaa.com,但是vs是bbb.com,计算之后发现server和vs没有关联关系，所以直接continue\n\t\t\tif len(intersectingHosts) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// 生成routeConfig.VirtualHost.routes\n\t\t\troutes, err := istio_route.BuildHTTPRoutesForVirtualService(node, push, virtualService, nameToServiceMap, port, map[string]bool{gatewayName: true})\n\t\t\t// 组装routeConfig.VirtualHost\n\t\t\tfor _, hostname := range intersectingHosts {\n\t\t\t\tif vHost, exists := vHostDedupMap[hostname]; exists {\n\t\t\t\t\t// before merging this virtual service's routes, make sure that the existing one is not a tls redirect host\n\t\t\t\t\tif vHost.RequireTls == route.VirtualHost_NONE {\n\t\t\t\t\t\tvHost.Routes = append(vHost.Routes, routes...)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnewVHost := &route.VirtualHost{\n\t\t\t\t\t\tName:                       domainName(string(hostname), port),\n\t\t\t\t\t\tDomains:                    buildGatewayVirtualHostDomains(string(hostname), port),\n\t\t\t\t\t\tRoutes:                     routes,\n\t\t\t\t\t\tIncludeRequestAttemptCount: true,\n\t\t\t\t\t}\n\t\t\t\t\tvHostDedupMap[hostname] = newVHost\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tvar virtualHosts []*route.VirtualHost\n\n\tvirtualHosts = make([]*route.VirtualHost, 0, len(vHostDedupMap))\n\tfor _, v := range vHostDedupMap {\n\t\tv.Routes = istio_route.CombineVHostRoutes(v.Routes)\n\t\tvirtualHosts = append(virtualHosts, v)\n\t}\n\trouteCfg := &route.RouteConfiguration{\n\t\t// Retain the routeName as its used by EnvoyFilter patching logic\n\t\tName:             routeName,\n\t\tVirtualHosts:     virtualHosts,\n\t\tValidateClusters: proto.BoolFalse,\n\t}\n\treturn routeCfg\n}\n```\n\n# 总结\n\n### istio的Gateway和VirtualService就是envoy LDS和RDS的抽象\n\nistio的抽象更加的灵活，配置更加方便\n\n### 使用方式和rds生成的耗时探索\n\nroute_config的规模=https域名的数量+1(http.8080)\n\n以http.8080这个routeConfig为例，为了减少遍历的次数，node上的server越少越快，每个gateway对应的virtualservice越少越快\n\n每组域名生成一个Gateway对象，每一个gateway对象管理一个VirtualService。\n\n在这样场景之下，生成http.8080的routeConfig,rds生成耗时不会因为多次循环放大。\n","slug":"ServiceMesh-istio-control-plane-1","published":1,"updated":"2021-04-25T09:59:52.378Z","_id":"cknsm4wxm0000mm0m2iblaq5y","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"istio对象\"><a href=\"#istio对象\" class=\"headerlink\" title=\"istio对象\"></a>istio对象</h2><ol>\n<li>Gateway</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Gateway</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">shaoyu-test</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">shaoyu</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">istio:</span> <span class=\"string\">ingressgateway</span></span><br><span class=\"line\">  <span class=\"attr\">servers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">www.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">example-gw</span></span><br><span class=\"line\">      <span class=\"attr\">number:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">api.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">example-api-gw</span></span><br><span class=\"line\">      <span class=\"attr\">number:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">HTTP</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>VirtualService<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">VirtualService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">vs-www.example.com</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">shaoyu</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">gateways:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">shaoyu-test</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">www.example.com</span></span><br><span class=\"line\">  <span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">match:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">ignoreUriCase:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span></span><br><span class=\"line\">        <span class=\"attr\">prefix:</span> <span class=\"string\">/</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">example-app</span></span><br><span class=\"line\">    <span class=\"attr\">route:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">destination:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">example-app-cluster</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span></span><br><span class=\"line\">          <span class=\"attr\">number:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"string\">120s</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"envoy对象\"><a href=\"#envoy对象\" class=\"headerlink\" title=\"envoy对象\"></a>envoy对象</h3><ol>\n<li><a href=\"%5Bhttps://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#config-listener-v3-listener%5D(https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#config-listener-v3-listener)\">config.listener.v3.listener</a></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;0.0.0.0_8080&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;active_state&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;version_info&quot;</span>: <span class=\"string\">&quot;2021-04-21T10:28:45Z/16403&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;listener&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;@type&quot;</span>: <span class=\"string\">&quot;type.googleapis.com/envoy.config.listener.v3.Listener&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;0.0.0.0_8080&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;address&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;socket_address&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;address&quot;</span>: <span class=\"string\">&quot;0.0.0.0&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;port_value&quot;</span>: <span class=\"number\">8080</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><a href=\"%5Bhttps://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-v3-api-msg-config-route-v3-routeconfiguration%5D(https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-v3-api-msg-config-route-v3-routeconfiguration)\">config.route.v3.RouteConfiguration</a></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;version_info&quot;</span>: <span class=\"string\">&quot;2021-04-21T11:31:14Z/18732&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;route_config&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;@type&quot;</span>: <span class=\"string\">&quot;type.googleapis.com/envoy.config.route.v3.RouteConfiguration&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;http.8080&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;virtual_hosts&quot;</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;www.example.org:8080&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;domains&quot;</span>: [</span><br><span class=\"line\">                    <span class=\"string\">&quot;www.example.org&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;www.example.org:*&quot;</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">&quot;routes&quot;</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">&quot;match&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">&quot;prefix&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">&quot;case_sensitive&quot;</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;route&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">&quot;cluster&quot;</span>: <span class=\"string\">&quot;outbound|8080||example-app-cluster&quot;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">&quot;timeout&quot;</span>: <span class=\"string\">&quot;120s&quot;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">&quot;max_grpc_timeout&quot;</span>: <span class=\"string\">&quot;120s&quot;</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;route-example-app&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">&quot;include_request_attempt_count&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LDS源码分析\"><a href=\"#LDS源码分析\" class=\"headerlink\" title=\"LDS源码分析\"></a>LDS源码分析</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DiscoveryServer)</span> <span class=\"title\">pushLds</span><span class=\"params\">(con *Connection, push *model.PushContext, version <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\trawListeners := s.ConfigGenerator.BuildListeners(con.node, push)</span><br><span class=\"line\">\tresponse := ldsDiscoveryResponse(rawListeners, version, push.Version, con.node.RequestedTypes.LDS)</span><br><span class=\"line\">\terr := con.send(response)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\trecordSendError(<span class=\"string\">&quot;LDS&quot;</span>, con.ConID, ldsSendErrPushes, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BuildListeners\"><a href=\"#BuildListeners\" class=\"headerlink\" title=\"BuildListeners\"></a>BuildListeners</h3><ol>\n<li>遍历node.mergedGatewy.Servers</li>\n<li>获取到port.number，生成config.listener.v3.listener</li>\n<li>推送给node</li>\n</ol>\n<h2 id=\"RDS源码分析\"><a href=\"#RDS源码分析\" class=\"headerlink\" title=\"RDS源码分析\"></a>RDS源码分析</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DiscoveryServer)</span> <span class=\"title\">pushRoute</span><span class=\"params\">(con *Connection, push *model.PushContext, version <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tpushStart := time.Now()</span><br><span class=\"line\">\trawRoutes := s.ConfigGenerator.BuildHTTPRoutes(con.node, push, con.Routes())</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\ttip: con.Route()就是route_config.name的集合</span></span><br><span class=\"line\"><span class=\"comment\">\thttp.8080的virtual_hosts的集合中每个子项对应约等于gateway中server.hosts(这个是近似，在处理的过程会对泛域名进行处理)。</span></span><br><span class=\"line\"><span class=\"comment\">\thttps的server，每一个server对应一个route_config。</span></span><br><span class=\"line\"><span class=\"comment\">\tcon.Route()的数量就对应下发给envoy的route_config的数量。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tresponse := routeDiscoveryResponse(rawRoutes, version, push.Version, con.node.RequestedTypes.RDS)</span><br><span class=\"line\">\terr := con.send(response)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历routeNames生成对应的routeConfig，针对每一个routeConfig patch envoyfilter</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, routeName := <span class=\"keyword\">range</span> routeNames &#123;</span><br><span class=\"line\">\trc := configgen.buildGatewayHTTPRouteConfig(node, push, routeName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> rc != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\trc = envoyfilter.ApplyRouteConfigurationPatches(networking.EnvoyFilter_GATEWAY, node, push, rc)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\trc = &amp;route.RouteConfiguration&#123;</span><br><span class=\"line\">\t\t\tName:             routeName,</span><br><span class=\"line\">\t\t\tVirtualHosts:     []*route.VirtualHost&#123;&#125;,</span><br><span class=\"line\">\t\t\tValidateClusters: proto.BoolFalse,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trouteConfigurations = <span class=\"built_in\">append</span>(routeConfigurations, rc)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(configgen *ConfigGeneratorImpl)</span> <span class=\"title\">buildGatewayHTTPRouteConfig</span><span class=\"params\">(node *model.Proxy, push *model.PushContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\trouteName <span class=\"keyword\">string</span>)</span> *<span class=\"title\">route</span>.<span class=\"title\">RouteConfiguration</span></span> &#123;</span><br><span class=\"line\">\tmerged := node.MergedGateway</span><br><span class=\"line\">\t<span class=\"comment\">// 根据routeName获取到所有的server，就是gateway的中所有的server</span></span><br><span class=\"line\">\tservers := merged.ServersByRouteName[routeName]</span><br><span class=\"line\">        <span class=\"comment\">// routeName的划分，就是按照port来的，所以一个routeName中所有的server都是同一个port</span></span><br><span class=\"line\">\tport := <span class=\"keyword\">int</span>(servers[<span class=\"number\">0</span>].Port.Number)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnameToServiceMap := push.ServiceByHostname</span><br><span class=\"line\">\t<span class=\"comment\">// envoy的route_config virtual_host就是一组域名下，httppath指向对应envoy cluster的路由信息描述</span></span><br><span class=\"line\">\t<span class=\"comment\">// 这个信息需要根据istio的VirtualService去生成</span></span><br><span class=\"line\">\tvHostDedupMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[host.Name]*route.VirtualHost)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 同一个server可能有http和https的入口，server会存在多个routeConfig中，可能会被多次命中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, server := <span class=\"keyword\">range</span> servers &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据server查询gateway，这个地方，同一个gateway可能会被多次命中</span></span><br><span class=\"line\">\t\tgatewayName := merged.GatewayNameForServer[server]</span><br><span class=\"line\">\t\t<span class=\"comment\">// 取出所有的virtualServices信息，需要遍历virtualService生成http路由</span></span><br><span class=\"line\">\t\tvirtualServices := push.VirtualServicesForGateway(node, gatewayName)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 同一个vs可能被绑定到多个gateway上，也会被多次命中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, virtualService := <span class=\"keyword\">range</span> virtualServices &#123;</span><br><span class=\"line\">\t\t\tvirtualServiceHosts := host.NewNames(virtualService.Spec.(*networking.VirtualService).Hosts)</span><br><span class=\"line\">\t\t\tserverHosts := host.NamesForNamespace(server.Hosts, virtualService.Namespace)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tintersectingHosts := serverHosts.Intersection(virtualServiceHosts)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//server的host是aaa.com,但是vs是bbb.com,计算之后发现server和vs没有关联关系，所以直接continue</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(intersectingHosts) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 生成routeConfig.VirtualHost.routes</span></span><br><span class=\"line\">\t\t\troutes, err := istio_route.BuildHTTPRoutesForVirtualService(node, push, virtualService, nameToServiceMap, port, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>&#123;gatewayName: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 组装routeConfig.VirtualHost</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, hostname := <span class=\"keyword\">range</span> intersectingHosts &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> vHost, exists := vHostDedupMap[hostname]; exists &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// before merging this virtual service&#x27;s routes, make sure that the existing one is not a tls redirect host</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> vHost.RequireTls == route.VirtualHost_NONE &#123;</span><br><span class=\"line\">\t\t\t\t\t\tvHost.Routes = <span class=\"built_in\">append</span>(vHost.Routes, routes...)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tnewVHost := &amp;route.VirtualHost&#123;</span><br><span class=\"line\">\t\t\t\t\t\tName:                       domainName(<span class=\"keyword\">string</span>(hostname), port),</span><br><span class=\"line\">\t\t\t\t\t\tDomains:                    buildGatewayVirtualHostDomains(<span class=\"keyword\">string</span>(hostname), port),</span><br><span class=\"line\">\t\t\t\t\t\tRoutes:                     routes,</span><br><span class=\"line\">\t\t\t\t\t\tIncludeRequestAttemptCount: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tvHostDedupMap[hostname] = newVHost</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> virtualHosts []*route.VirtualHost</span><br><span class=\"line\"></span><br><span class=\"line\">\tvirtualHosts = <span class=\"built_in\">make</span>([]*route.VirtualHost, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(vHostDedupMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> vHostDedupMap &#123;</span><br><span class=\"line\">\t\tv.Routes = istio_route.CombineVHostRoutes(v.Routes)</span><br><span class=\"line\">\t\tvirtualHosts = <span class=\"built_in\">append</span>(virtualHosts, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trouteCfg := &amp;route.RouteConfiguration&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Retain the routeName as its used by EnvoyFilter patching logic</span></span><br><span class=\"line\">\t\tName:             routeName,</span><br><span class=\"line\">\t\tVirtualHosts:     virtualHosts,</span><br><span class=\"line\">\t\tValidateClusters: proto.BoolFalse,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> routeCfg</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h3 id=\"istio的Gateway和VirtualService就是envoy-LDS和RDS的抽象\"><a href=\"#istio的Gateway和VirtualService就是envoy-LDS和RDS的抽象\" class=\"headerlink\" title=\"istio的Gateway和VirtualService就是envoy LDS和RDS的抽象\"></a>istio的Gateway和VirtualService就是envoy LDS和RDS的抽象</h3><p>istio的抽象更加的灵活，配置更加方便</p>\n<h3 id=\"使用方式和rds生成的耗时探索\"><a href=\"#使用方式和rds生成的耗时探索\" class=\"headerlink\" title=\"使用方式和rds生成的耗时探索\"></a>使用方式和rds生成的耗时探索</h3><p>route_config的规模=https域名的数量+1(http.8080)</p>\n<p>以http.8080这个routeConfig为例，为了减少遍历的次数，node上的server越少越快，每个gateway对应的virtualservice越少越快</p>\n<p>每组域名生成一个Gateway对象，每一个gateway对象管理一个VirtualService。</p>\n<p>在这样场景之下，生成http.8080的routeConfig,rds生成耗时不会因为多次循环放大。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"istio对象\"><a href=\"#istio对象\" class=\"headerlink\" title=\"istio对象\"></a>istio对象</h2><ol>\n<li>Gateway</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Gateway</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">shaoyu-test</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">shaoyu</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">istio:</span> <span class=\"string\">ingressgateway</span></span><br><span class=\"line\">  <span class=\"attr\">servers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">www.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">example-gw</span></span><br><span class=\"line\">      <span class=\"attr\">number:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">api.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">example-api-gw</span></span><br><span class=\"line\">      <span class=\"attr\">number:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">HTTP</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>VirtualService<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">VirtualService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">vs-www.example.com</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">shaoyu</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">gateways:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">shaoyu-test</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">www.example.com</span></span><br><span class=\"line\">  <span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">match:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">ignoreUriCase:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span></span><br><span class=\"line\">        <span class=\"attr\">prefix:</span> <span class=\"string\">/</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">example-app</span></span><br><span class=\"line\">    <span class=\"attr\">route:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">destination:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">example-app-cluster</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span></span><br><span class=\"line\">          <span class=\"attr\">number:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"string\">120s</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"envoy对象\"><a href=\"#envoy对象\" class=\"headerlink\" title=\"envoy对象\"></a>envoy对象</h3><ol>\n<li><a href=\"%5Bhttps://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#config-listener-v3-listener%5D(https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#config-listener-v3-listener)\">config.listener.v3.listener</a></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;0.0.0.0_8080&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;active_state&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;version_info&quot;</span>: <span class=\"string\">&quot;2021-04-21T10:28:45Z/16403&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;listener&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;@type&quot;</span>: <span class=\"string\">&quot;type.googleapis.com/envoy.config.listener.v3.Listener&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;0.0.0.0_8080&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;address&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;socket_address&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;address&quot;</span>: <span class=\"string\">&quot;0.0.0.0&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;port_value&quot;</span>: <span class=\"number\">8080</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><a href=\"%5Bhttps://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-v3-api-msg-config-route-v3-routeconfiguration%5D(https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-v3-api-msg-config-route-v3-routeconfiguration)\">config.route.v3.RouteConfiguration</a></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;version_info&quot;</span>: <span class=\"string\">&quot;2021-04-21T11:31:14Z/18732&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;route_config&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;@type&quot;</span>: <span class=\"string\">&quot;type.googleapis.com/envoy.config.route.v3.RouteConfiguration&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;http.8080&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;virtual_hosts&quot;</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;www.example.org:8080&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;domains&quot;</span>: [</span><br><span class=\"line\">                    <span class=\"string\">&quot;www.example.org&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;www.example.org:*&quot;</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">&quot;routes&quot;</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">&quot;match&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">&quot;prefix&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">&quot;case_sensitive&quot;</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;route&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">&quot;cluster&quot;</span>: <span class=\"string\">&quot;outbound|8080||example-app-cluster&quot;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">&quot;timeout&quot;</span>: <span class=\"string\">&quot;120s&quot;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">&quot;max_grpc_timeout&quot;</span>: <span class=\"string\">&quot;120s&quot;</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;route-example-app&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">&quot;include_request_attempt_count&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LDS源码分析\"><a href=\"#LDS源码分析\" class=\"headerlink\" title=\"LDS源码分析\"></a>LDS源码分析</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DiscoveryServer)</span> <span class=\"title\">pushLds</span><span class=\"params\">(con *Connection, push *model.PushContext, version <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\trawListeners := s.ConfigGenerator.BuildListeners(con.node, push)</span><br><span class=\"line\">\tresponse := ldsDiscoveryResponse(rawListeners, version, push.Version, con.node.RequestedTypes.LDS)</span><br><span class=\"line\">\terr := con.send(response)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\trecordSendError(<span class=\"string\">&quot;LDS&quot;</span>, con.ConID, ldsSendErrPushes, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BuildListeners\"><a href=\"#BuildListeners\" class=\"headerlink\" title=\"BuildListeners\"></a>BuildListeners</h3><ol>\n<li>遍历node.mergedGatewy.Servers</li>\n<li>获取到port.number，生成config.listener.v3.listener</li>\n<li>推送给node</li>\n</ol>\n<h2 id=\"RDS源码分析\"><a href=\"#RDS源码分析\" class=\"headerlink\" title=\"RDS源码分析\"></a>RDS源码分析</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DiscoveryServer)</span> <span class=\"title\">pushRoute</span><span class=\"params\">(con *Connection, push *model.PushContext, version <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tpushStart := time.Now()</span><br><span class=\"line\">\trawRoutes := s.ConfigGenerator.BuildHTTPRoutes(con.node, push, con.Routes())</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\ttip: con.Route()就是route_config.name的集合</span></span><br><span class=\"line\"><span class=\"comment\">\thttp.8080的virtual_hosts的集合中每个子项对应约等于gateway中server.hosts(这个是近似，在处理的过程会对泛域名进行处理)。</span></span><br><span class=\"line\"><span class=\"comment\">\thttps的server，每一个server对应一个route_config。</span></span><br><span class=\"line\"><span class=\"comment\">\tcon.Route()的数量就对应下发给envoy的route_config的数量。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tresponse := routeDiscoveryResponse(rawRoutes, version, push.Version, con.node.RequestedTypes.RDS)</span><br><span class=\"line\">\terr := con.send(response)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历routeNames生成对应的routeConfig，针对每一个routeConfig patch envoyfilter</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, routeName := <span class=\"keyword\">range</span> routeNames &#123;</span><br><span class=\"line\">\trc := configgen.buildGatewayHTTPRouteConfig(node, push, routeName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> rc != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\trc = envoyfilter.ApplyRouteConfigurationPatches(networking.EnvoyFilter_GATEWAY, node, push, rc)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\trc = &amp;route.RouteConfiguration&#123;</span><br><span class=\"line\">\t\t\tName:             routeName,</span><br><span class=\"line\">\t\t\tVirtualHosts:     []*route.VirtualHost&#123;&#125;,</span><br><span class=\"line\">\t\t\tValidateClusters: proto.BoolFalse,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trouteConfigurations = <span class=\"built_in\">append</span>(routeConfigurations, rc)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(configgen *ConfigGeneratorImpl)</span> <span class=\"title\">buildGatewayHTTPRouteConfig</span><span class=\"params\">(node *model.Proxy, push *model.PushContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\trouteName <span class=\"keyword\">string</span>)</span> *<span class=\"title\">route</span>.<span class=\"title\">RouteConfiguration</span></span> &#123;</span><br><span class=\"line\">\tmerged := node.MergedGateway</span><br><span class=\"line\">\t<span class=\"comment\">// 根据routeName获取到所有的server，就是gateway的中所有的server</span></span><br><span class=\"line\">\tservers := merged.ServersByRouteName[routeName]</span><br><span class=\"line\">        <span class=\"comment\">// routeName的划分，就是按照port来的，所以一个routeName中所有的server都是同一个port</span></span><br><span class=\"line\">\tport := <span class=\"keyword\">int</span>(servers[<span class=\"number\">0</span>].Port.Number)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnameToServiceMap := push.ServiceByHostname</span><br><span class=\"line\">\t<span class=\"comment\">// envoy的route_config virtual_host就是一组域名下，httppath指向对应envoy cluster的路由信息描述</span></span><br><span class=\"line\">\t<span class=\"comment\">// 这个信息需要根据istio的VirtualService去生成</span></span><br><span class=\"line\">\tvHostDedupMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[host.Name]*route.VirtualHost)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 同一个server可能有http和https的入口，server会存在多个routeConfig中，可能会被多次命中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, server := <span class=\"keyword\">range</span> servers &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据server查询gateway，这个地方，同一个gateway可能会被多次命中</span></span><br><span class=\"line\">\t\tgatewayName := merged.GatewayNameForServer[server]</span><br><span class=\"line\">\t\t<span class=\"comment\">// 取出所有的virtualServices信息，需要遍历virtualService生成http路由</span></span><br><span class=\"line\">\t\tvirtualServices := push.VirtualServicesForGateway(node, gatewayName)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 同一个vs可能被绑定到多个gateway上，也会被多次命中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, virtualService := <span class=\"keyword\">range</span> virtualServices &#123;</span><br><span class=\"line\">\t\t\tvirtualServiceHosts := host.NewNames(virtualService.Spec.(*networking.VirtualService).Hosts)</span><br><span class=\"line\">\t\t\tserverHosts := host.NamesForNamespace(server.Hosts, virtualService.Namespace)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tintersectingHosts := serverHosts.Intersection(virtualServiceHosts)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//server的host是aaa.com,但是vs是bbb.com,计算之后发现server和vs没有关联关系，所以直接continue</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(intersectingHosts) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 生成routeConfig.VirtualHost.routes</span></span><br><span class=\"line\">\t\t\troutes, err := istio_route.BuildHTTPRoutesForVirtualService(node, push, virtualService, nameToServiceMap, port, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>&#123;gatewayName: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 组装routeConfig.VirtualHost</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, hostname := <span class=\"keyword\">range</span> intersectingHosts &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> vHost, exists := vHostDedupMap[hostname]; exists &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// before merging this virtual service&#x27;s routes, make sure that the existing one is not a tls redirect host</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> vHost.RequireTls == route.VirtualHost_NONE &#123;</span><br><span class=\"line\">\t\t\t\t\t\tvHost.Routes = <span class=\"built_in\">append</span>(vHost.Routes, routes...)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tnewVHost := &amp;route.VirtualHost&#123;</span><br><span class=\"line\">\t\t\t\t\t\tName:                       domainName(<span class=\"keyword\">string</span>(hostname), port),</span><br><span class=\"line\">\t\t\t\t\t\tDomains:                    buildGatewayVirtualHostDomains(<span class=\"keyword\">string</span>(hostname), port),</span><br><span class=\"line\">\t\t\t\t\t\tRoutes:                     routes,</span><br><span class=\"line\">\t\t\t\t\t\tIncludeRequestAttemptCount: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tvHostDedupMap[hostname] = newVHost</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> virtualHosts []*route.VirtualHost</span><br><span class=\"line\"></span><br><span class=\"line\">\tvirtualHosts = <span class=\"built_in\">make</span>([]*route.VirtualHost, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(vHostDedupMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> vHostDedupMap &#123;</span><br><span class=\"line\">\t\tv.Routes = istio_route.CombineVHostRoutes(v.Routes)</span><br><span class=\"line\">\t\tvirtualHosts = <span class=\"built_in\">append</span>(virtualHosts, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trouteCfg := &amp;route.RouteConfiguration&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Retain the routeName as its used by EnvoyFilter patching logic</span></span><br><span class=\"line\">\t\tName:             routeName,</span><br><span class=\"line\">\t\tVirtualHosts:     virtualHosts,</span><br><span class=\"line\">\t\tValidateClusters: proto.BoolFalse,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> routeCfg</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h3 id=\"istio的Gateway和VirtualService就是envoy-LDS和RDS的抽象\"><a href=\"#istio的Gateway和VirtualService就是envoy-LDS和RDS的抽象\" class=\"headerlink\" title=\"istio的Gateway和VirtualService就是envoy LDS和RDS的抽象\"></a>istio的Gateway和VirtualService就是envoy LDS和RDS的抽象</h3><p>istio的抽象更加的灵活，配置更加方便</p>\n<h3 id=\"使用方式和rds生成的耗时探索\"><a href=\"#使用方式和rds生成的耗时探索\" class=\"headerlink\" title=\"使用方式和rds生成的耗时探索\"></a>使用方式和rds生成的耗时探索</h3><p>route_config的规模=https域名的数量+1(http.8080)</p>\n<p>以http.8080这个routeConfig为例，为了减少遍历的次数，node上的server越少越快，每个gateway对应的virtualservice越少越快</p>\n<p>每组域名生成一个Gateway对象，每一个gateway对象管理一个VirtualService。</p>\n<p>在这样场景之下，生成http.8080的routeConfig,rds生成耗时不会因为多次循环放大。</p>\n"},{"title":"ServiceMesh之istio控制面二","date":"2021-04-25T10:10:40.000Z","_content":"\n## istio envoyfilter对象\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: EnvoyFilter\nspec:\n  configPatches:\n    - applyTo: HTTP_FILTER // HTTP_FILTER,NETWORK_FILTER\n      match: //\n        context: Gateway // oneof(Gateway,SidecarInBound,SIDECAR_OUTBOUND)\n        proxyMatch: // match istio version\n          proxyVersion: v1.7.5\n        routeConfiguration: // oneof (routeConfiguration,listener,cluster)\n          portNumber: 8080\n          portName: HTTP\n          gateway: shaoyu-test\n          vhost:\n            name: www.example.com:8080\n            route:\n              name: example-app\n              action: oneof(INSERT_BEFORE,ROUTE,REDIRECT,DIRECT_RESPONSE)\n          name:\n      patch:\n        operation: INSERT_BEFORE\n        value:\n```\n\n1. configPatch的类型\n\n## rds envoyfilter patch\n\n```go\n//遍历routeNames生成对应的routeConfig，针对每一个routeConfig patch envoyfilter\nfor _, routeName := range routeNames {\n  rc := configgen.buildGatewayHTTPRouteConfig(node, push, routeName)\n  if rc != nil {\n     rc = envoyfilter.ApplyRouteConfigurationPatches(networking.EnvoyFilter_GATEWAY, node, push, rc)\n  } else {\n    rc = &route.RouteConfiguration{\n           Name:             routeName,\n           VirtualHosts:     []*route.VirtualHost{},\n           ValidateClusters: proto.BoolFalse,\n        }\n  }\n  routeConfigurations = append(routeConfigurations, rc)\n}\n```\n\n1. envoyfilter的patch是遍历的routeName\n1. 如果一个vs既有https又有http的入口，那在patch envoyfilter的时候，一个vs下面的所有的route都会被遍历\n\n## patch是如何做的\n\n``` go\nfunc ApplyRouteConfigurationPatches(patchContext networking.EnvoyFilter_PatchContext,proxy *model.Proxy,push *model.PushContext,routeConfiguration *route.RouteConfiguration) (out *route.RouteConfiguration) {\n\tout = routeConfiguration\n\t// 从pushContext中，根据proxy的信息过滤所有符合条件的envoyfilter\n\tefw := push.EnvoyFilters(proxy)\n\t// only merge is applicable for route configuration.\n\t...\n\tdoVirtualHostListOperation(patchContext, efw.Patches, routeConfiguration)\n\treturn routeConfiguration\n}\n```\n\n```go\nfunc doVirtualHostListOperation(patchContext networking.EnvoyFilter_PatchContext, patches map[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper, routeConfiguration *route.RouteConfiguration) {\nvirtualHostsRemoved := false\n    // first do removes/merges\n    for _, vhost := range routeConfiguration.VirtualHosts {\n        doVirtualHostOperation(patchContext, patches, routeConfiguration, vhost, &virtualHostsRemoved)\n    }\n\n// envoyFilter type VIRTUAL_HOST add and remove\n...\n}\n```\n\n```go\nfunc doVirtualHostOperation(patchContext networking.EnvoyFilter_PatchContext, patches map[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper, routeConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost, virtualHostRemoved *bool) {\n// 遍历envoyfilter，取出类型是EnvoyFilter_VIRTUAL_HOST，类型是merge\n    for _, cp := range patches[networking.EnvoyFilter_VIRTUAL_HOST] {\n    if commonConditionMatch(patchContext, cp) && routeConfigurationMatch(patchContext, routeConfiguration, cp) && virtualHostMatch(virtualHost, cp) {\n    if cp.Operation == networking.EnvoyFilter_Patch_REMOVE {\n        ...\n    } else if cp.Operation == networking.EnvoyFilter_Patch_MERGE {\n        proto.Merge(virtualHost, cp.Value)\n            }\n        }\n    }\n    // 针对每一条路由，执行patch\n    doHTTPRouteListOperation(patchContext, patches, routeConfiguration, virtualHost)\n}\n```\n\n```go\nfunc doHTTPRouteListOperation(patchContext networking.EnvoyFilter_PatchContext,\npatches map[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper,\nrouteConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost) {\n    routesRemoved := false\n    // 遍历每一条路由，进行patch，patches是通过proxy和routeName以及virtualHost(optional)关联出来的\n    for index := range virtualHost.Routes {\n        doHTTPRouteOperation(patchContext, patches, routeConfiguration, virtualHost, index, &routesRemoved)\n    }\n    // now for the adds and remove\n    ...\n}\n\n```\n```go\nfunc doHTTPRouteOperation(patchContext networking.EnvoyFilter_PatchContext,\n\tpatches map[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper,\n\trouteConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost, routeIndex int, routesRemoved *bool) {\n\tfor _, cp := range patches[networking.EnvoyFilter_HTTP_ROUTE] {\n\t\t//将符合条件的envoyfilter patch到route上\n\t\tif commonConditionMatch(patchContext, cp) &&\n\t\t\trouteConfigurationMatch(patchContext, routeConfiguration, cp) &&\n\t\t\tvirtualHostMatch(virtualHost, cp) &&\n\t\t\trouteMatch(virtualHost.Routes[routeIndex], cp) {\n\n\t\t\t// different virtualHosts may share same routes pointer\n\t\t\tvirtualHost.Routes = cloneVhostRoutes(virtualHost.Routes)\n\t\t\tif cp.Operation == networking.EnvoyFilter_Patch_REMOVE {\n\t\t\t\tvirtualHost.Routes[routeIndex] = nil\n\t\t\t\t*routesRemoved = true\n\t\t\t\treturn\n\t\t\t} else if cp.Operation == networking.EnvoyFilter_Patch_MERGE {\n\t\t\t\tproto.Merge(virtualHost.Routes[routeIndex], cp.Value)\n\t\t\t}\n\t\t}\n\t}\n}\n```\n# 总结\nenvoyfilter的灵活性很强，但是使用起来还是有点痛苦的。\n\n将routes的列表和patch的列表做匹配，找到每个route需要的patch，现在有的实现上，近似于两层的循环。 在route和envoyfilter量大的情况下，patch的速度会严重影响rds build的耗时。\n\n同理针对cluster的patch，也有这样的问题\n\n1. 根据使用场景，对envoyfilter做预处理，可以根据route可以通过近似O(1)的时间复杂度去get到需要patch的filter\n1. 遍历全量的route也是相对比较耗时的，需要进步一步的优化","source":"_posts/ServiceMesh-istio-control-plane-2.md","raw":"---\ntitle: ServiceMesh之istio控制面二\ndate: 2021-04-25 18:10:40\ntags:\n---\n\n## istio envoyfilter对象\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: EnvoyFilter\nspec:\n  configPatches:\n    - applyTo: HTTP_FILTER // HTTP_FILTER,NETWORK_FILTER\n      match: //\n        context: Gateway // oneof(Gateway,SidecarInBound,SIDECAR_OUTBOUND)\n        proxyMatch: // match istio version\n          proxyVersion: v1.7.5\n        routeConfiguration: // oneof (routeConfiguration,listener,cluster)\n          portNumber: 8080\n          portName: HTTP\n          gateway: shaoyu-test\n          vhost:\n            name: www.example.com:8080\n            route:\n              name: example-app\n              action: oneof(INSERT_BEFORE,ROUTE,REDIRECT,DIRECT_RESPONSE)\n          name:\n      patch:\n        operation: INSERT_BEFORE\n        value:\n```\n\n1. configPatch的类型\n\n## rds envoyfilter patch\n\n```go\n//遍历routeNames生成对应的routeConfig，针对每一个routeConfig patch envoyfilter\nfor _, routeName := range routeNames {\n  rc := configgen.buildGatewayHTTPRouteConfig(node, push, routeName)\n  if rc != nil {\n     rc = envoyfilter.ApplyRouteConfigurationPatches(networking.EnvoyFilter_GATEWAY, node, push, rc)\n  } else {\n    rc = &route.RouteConfiguration{\n           Name:             routeName,\n           VirtualHosts:     []*route.VirtualHost{},\n           ValidateClusters: proto.BoolFalse,\n        }\n  }\n  routeConfigurations = append(routeConfigurations, rc)\n}\n```\n\n1. envoyfilter的patch是遍历的routeName\n1. 如果一个vs既有https又有http的入口，那在patch envoyfilter的时候，一个vs下面的所有的route都会被遍历\n\n## patch是如何做的\n\n``` go\nfunc ApplyRouteConfigurationPatches(patchContext networking.EnvoyFilter_PatchContext,proxy *model.Proxy,push *model.PushContext,routeConfiguration *route.RouteConfiguration) (out *route.RouteConfiguration) {\n\tout = routeConfiguration\n\t// 从pushContext中，根据proxy的信息过滤所有符合条件的envoyfilter\n\tefw := push.EnvoyFilters(proxy)\n\t// only merge is applicable for route configuration.\n\t...\n\tdoVirtualHostListOperation(patchContext, efw.Patches, routeConfiguration)\n\treturn routeConfiguration\n}\n```\n\n```go\nfunc doVirtualHostListOperation(patchContext networking.EnvoyFilter_PatchContext, patches map[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper, routeConfiguration *route.RouteConfiguration) {\nvirtualHostsRemoved := false\n    // first do removes/merges\n    for _, vhost := range routeConfiguration.VirtualHosts {\n        doVirtualHostOperation(patchContext, patches, routeConfiguration, vhost, &virtualHostsRemoved)\n    }\n\n// envoyFilter type VIRTUAL_HOST add and remove\n...\n}\n```\n\n```go\nfunc doVirtualHostOperation(patchContext networking.EnvoyFilter_PatchContext, patches map[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper, routeConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost, virtualHostRemoved *bool) {\n// 遍历envoyfilter，取出类型是EnvoyFilter_VIRTUAL_HOST，类型是merge\n    for _, cp := range patches[networking.EnvoyFilter_VIRTUAL_HOST] {\n    if commonConditionMatch(patchContext, cp) && routeConfigurationMatch(patchContext, routeConfiguration, cp) && virtualHostMatch(virtualHost, cp) {\n    if cp.Operation == networking.EnvoyFilter_Patch_REMOVE {\n        ...\n    } else if cp.Operation == networking.EnvoyFilter_Patch_MERGE {\n        proto.Merge(virtualHost, cp.Value)\n            }\n        }\n    }\n    // 针对每一条路由，执行patch\n    doHTTPRouteListOperation(patchContext, patches, routeConfiguration, virtualHost)\n}\n```\n\n```go\nfunc doHTTPRouteListOperation(patchContext networking.EnvoyFilter_PatchContext,\npatches map[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper,\nrouteConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost) {\n    routesRemoved := false\n    // 遍历每一条路由，进行patch，patches是通过proxy和routeName以及virtualHost(optional)关联出来的\n    for index := range virtualHost.Routes {\n        doHTTPRouteOperation(patchContext, patches, routeConfiguration, virtualHost, index, &routesRemoved)\n    }\n    // now for the adds and remove\n    ...\n}\n\n```\n```go\nfunc doHTTPRouteOperation(patchContext networking.EnvoyFilter_PatchContext,\n\tpatches map[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper,\n\trouteConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost, routeIndex int, routesRemoved *bool) {\n\tfor _, cp := range patches[networking.EnvoyFilter_HTTP_ROUTE] {\n\t\t//将符合条件的envoyfilter patch到route上\n\t\tif commonConditionMatch(patchContext, cp) &&\n\t\t\trouteConfigurationMatch(patchContext, routeConfiguration, cp) &&\n\t\t\tvirtualHostMatch(virtualHost, cp) &&\n\t\t\trouteMatch(virtualHost.Routes[routeIndex], cp) {\n\n\t\t\t// different virtualHosts may share same routes pointer\n\t\t\tvirtualHost.Routes = cloneVhostRoutes(virtualHost.Routes)\n\t\t\tif cp.Operation == networking.EnvoyFilter_Patch_REMOVE {\n\t\t\t\tvirtualHost.Routes[routeIndex] = nil\n\t\t\t\t*routesRemoved = true\n\t\t\t\treturn\n\t\t\t} else if cp.Operation == networking.EnvoyFilter_Patch_MERGE {\n\t\t\t\tproto.Merge(virtualHost.Routes[routeIndex], cp.Value)\n\t\t\t}\n\t\t}\n\t}\n}\n```\n# 总结\nenvoyfilter的灵活性很强，但是使用起来还是有点痛苦的。\n\n将routes的列表和patch的列表做匹配，找到每个route需要的patch，现在有的实现上，近似于两层的循环。 在route和envoyfilter量大的情况下，patch的速度会严重影响rds build的耗时。\n\n同理针对cluster的patch，也有这样的问题\n\n1. 根据使用场景，对envoyfilter做预处理，可以根据route可以通过近似O(1)的时间复杂度去get到需要patch的filter\n1. 遍历全量的route也是相对比较耗时的，需要进步一步的优化","slug":"ServiceMesh-istio-control-plane-2","published":1,"updated":"2021-04-25T10:12:12.667Z","_id":"cknx0i5sw0000bh0majgm0zsq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"istio-envoyfilter对象\"><a href=\"#istio-envoyfilter对象\" class=\"headerlink\" title=\"istio envoyfilter对象\"></a>istio envoyfilter对象</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">EnvoyFilter</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">configPatches:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">applyTo:</span> <span class=\"string\">HTTP_FILTER</span> <span class=\"string\">//</span> <span class=\"string\">HTTP_FILTER,NETWORK_FILTER</span></span><br><span class=\"line\">      <span class=\"attr\">match:</span> <span class=\"string\">//</span></span><br><span class=\"line\">        <span class=\"attr\">context:</span> <span class=\"string\">Gateway</span> <span class=\"string\">//</span> <span class=\"string\">oneof(Gateway,SidecarInBound,SIDECAR_OUTBOUND)</span></span><br><span class=\"line\">        <span class=\"attr\">proxyMatch:</span> <span class=\"string\">//</span> <span class=\"string\">match</span> <span class=\"string\">istio</span> <span class=\"string\">version</span></span><br><span class=\"line\">          <span class=\"attr\">proxyVersion:</span> <span class=\"string\">v1.7.5</span></span><br><span class=\"line\">        <span class=\"attr\">routeConfiguration:</span> <span class=\"string\">//</span> <span class=\"string\">oneof</span> <span class=\"string\">(routeConfiguration,listener,cluster)</span></span><br><span class=\"line\">          <span class=\"attr\">portNumber:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">portName:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">          <span class=\"attr\">gateway:</span> <span class=\"string\">shaoyu-test</span></span><br><span class=\"line\">          <span class=\"attr\">vhost:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">www.example.com:8080</span></span><br><span class=\"line\">            <span class=\"attr\">route:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">example-app</span></span><br><span class=\"line\">              <span class=\"attr\">action:</span> <span class=\"string\">oneof(INSERT_BEFORE,ROUTE,REDIRECT,DIRECT_RESPONSE)</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span></span><br><span class=\"line\">      <span class=\"attr\">patch:</span></span><br><span class=\"line\">        <span class=\"attr\">operation:</span> <span class=\"string\">INSERT_BEFORE</span></span><br><span class=\"line\">        <span class=\"attr\">value:</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>configPatch的类型</li>\n</ol>\n<h2 id=\"rds-envoyfilter-patch\"><a href=\"#rds-envoyfilter-patch\" class=\"headerlink\" title=\"rds envoyfilter patch\"></a>rds envoyfilter patch</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历routeNames生成对应的routeConfig，针对每一个routeConfig patch envoyfilter</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, routeName := <span class=\"keyword\">range</span> routeNames &#123;</span><br><span class=\"line\">  rc := configgen.buildGatewayHTTPRouteConfig(node, push, routeName)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> rc != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">     rc = envoyfilter.ApplyRouteConfigurationPatches(networking.EnvoyFilter_GATEWAY, node, push, rc)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    rc = &amp;route.RouteConfiguration&#123;</span><br><span class=\"line\">           Name:             routeName,</span><br><span class=\"line\">           VirtualHosts:     []*route.VirtualHost&#123;&#125;,</span><br><span class=\"line\">           ValidateClusters: proto.BoolFalse,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  routeConfigurations = <span class=\"built_in\">append</span>(routeConfigurations, rc)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>envoyfilter的patch是遍历的routeName</li>\n<li>如果一个vs既有https又有http的入口，那在patch envoyfilter的时候，一个vs下面的所有的route都会被遍历</li>\n</ol>\n<h2 id=\"patch是如何做的\"><a href=\"#patch是如何做的\" class=\"headerlink\" title=\"patch是如何做的\"></a>patch是如何做的</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ApplyRouteConfigurationPatches</span><span class=\"params\">(patchContext networking.EnvoyFilter_PatchContext,proxy *model.Proxy,push *model.PushContext,routeConfiguration *route.RouteConfiguration)</span> <span class=\"params\">(out *route.RouteConfiguration)</span></span> &#123;</span><br><span class=\"line\">\tout = routeConfiguration</span><br><span class=\"line\">\t<span class=\"comment\">// 从pushContext中，根据proxy的信息过滤所有符合条件的envoyfilter</span></span><br><span class=\"line\">\tefw := push.EnvoyFilters(proxy)</span><br><span class=\"line\">\t<span class=\"comment\">// only merge is applicable for route configuration.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tdoVirtualHostListOperation(patchContext, efw.Patches, routeConfiguration)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> routeConfiguration</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doVirtualHostListOperation</span><span class=\"params\">(patchContext networking.EnvoyFilter_PatchContext, patches <span class=\"keyword\">map</span>[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper, routeConfiguration *route.RouteConfiguration)</span></span> &#123;</span><br><span class=\"line\">virtualHostsRemoved := <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// first do removes/merges</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, vhost := <span class=\"keyword\">range</span> routeConfiguration.VirtualHosts &#123;</span><br><span class=\"line\">        doVirtualHostOperation(patchContext, patches, routeConfiguration, vhost, &amp;virtualHostsRemoved)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// envoyFilter type VIRTUAL_HOST add and remove</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doVirtualHostOperation</span><span class=\"params\">(patchContext networking.EnvoyFilter_PatchContext, patches <span class=\"keyword\">map</span>[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper, routeConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost, virtualHostRemoved *<span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 遍历envoyfilter，取出类型是EnvoyFilter_VIRTUAL_HOST，类型是merge</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, cp := <span class=\"keyword\">range</span> patches[networking.EnvoyFilter_VIRTUAL_HOST] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> commonConditionMatch(patchContext, cp) &amp;&amp; routeConfigurationMatch(patchContext, routeConfiguration, cp) &amp;&amp; virtualHostMatch(virtualHost, cp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> cp.Operation == networking.EnvoyFilter_Patch_REMOVE &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cp.Operation == networking.EnvoyFilter_Patch_MERGE &#123;</span><br><span class=\"line\">        proto.Merge(virtualHost, cp.Value)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 针对每一条路由，执行patch</span></span><br><span class=\"line\">    doHTTPRouteListOperation(patchContext, patches, routeConfiguration, virtualHost)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doHTTPRouteListOperation</span><span class=\"params\">(patchContext networking.EnvoyFilter_PatchContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">patches <span class=\"keyword\">map</span>[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">routeConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost)</span></span> &#123;</span><br><span class=\"line\">    routesRemoved := <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历每一条路由，进行patch，patches是通过proxy和routeName以及virtualHost(optional)关联出来的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index := <span class=\"keyword\">range</span> virtualHost.Routes &#123;</span><br><span class=\"line\">        doHTTPRouteOperation(patchContext, patches, routeConfiguration, virtualHost, index, &amp;routesRemoved)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// now for the adds and remove</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doHTTPRouteOperation</span><span class=\"params\">(patchContext networking.EnvoyFilter_PatchContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tpatches <span class=\"keyword\">map</span>[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\trouteConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost, routeIndex <span class=\"keyword\">int</span>, routesRemoved *<span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, cp := <span class=\"keyword\">range</span> patches[networking.EnvoyFilter_HTTP_ROUTE] &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将符合条件的envoyfilter patch到route上</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> commonConditionMatch(patchContext, cp) &amp;&amp;</span><br><span class=\"line\">\t\t\trouteConfigurationMatch(patchContext, routeConfiguration, cp) &amp;&amp;</span><br><span class=\"line\">\t\t\tvirtualHostMatch(virtualHost, cp) &amp;&amp;</span><br><span class=\"line\">\t\t\trouteMatch(virtualHost.Routes[routeIndex], cp) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// different virtualHosts may share same routes pointer</span></span><br><span class=\"line\">\t\t\tvirtualHost.Routes = cloneVhostRoutes(virtualHost.Routes)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> cp.Operation == networking.EnvoyFilter_Patch_REMOVE &#123;</span><br><span class=\"line\">\t\t\t\tvirtualHost.Routes[routeIndex] = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t\t*routesRemoved = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cp.Operation == networking.EnvoyFilter_Patch_MERGE &#123;</span><br><span class=\"line\">\t\t\t\tproto.Merge(virtualHost.Routes[routeIndex], cp.Value)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>envoyfilter的灵活性很强，但是使用起来还是有点痛苦的。</p>\n<p>将routes的列表和patch的列表做匹配，找到每个route需要的patch，现在有的实现上，近似于两层的循环。 在route和envoyfilter量大的情况下，patch的速度会严重影响rds build的耗时。</p>\n<p>同理针对cluster的patch，也有这样的问题</p>\n<ol>\n<li>根据使用场景，对envoyfilter做预处理，可以根据route可以通过近似O(1)的时间复杂度去get到需要patch的filter</li>\n<li>遍历全量的route也是相对比较耗时的，需要进步一步的优化</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"istio-envoyfilter对象\"><a href=\"#istio-envoyfilter对象\" class=\"headerlink\" title=\"istio envoyfilter对象\"></a>istio envoyfilter对象</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">EnvoyFilter</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">configPatches:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">applyTo:</span> <span class=\"string\">HTTP_FILTER</span> <span class=\"string\">//</span> <span class=\"string\">HTTP_FILTER,NETWORK_FILTER</span></span><br><span class=\"line\">      <span class=\"attr\">match:</span> <span class=\"string\">//</span></span><br><span class=\"line\">        <span class=\"attr\">context:</span> <span class=\"string\">Gateway</span> <span class=\"string\">//</span> <span class=\"string\">oneof(Gateway,SidecarInBound,SIDECAR_OUTBOUND)</span></span><br><span class=\"line\">        <span class=\"attr\">proxyMatch:</span> <span class=\"string\">//</span> <span class=\"string\">match</span> <span class=\"string\">istio</span> <span class=\"string\">version</span></span><br><span class=\"line\">          <span class=\"attr\">proxyVersion:</span> <span class=\"string\">v1.7.5</span></span><br><span class=\"line\">        <span class=\"attr\">routeConfiguration:</span> <span class=\"string\">//</span> <span class=\"string\">oneof</span> <span class=\"string\">(routeConfiguration,listener,cluster)</span></span><br><span class=\"line\">          <span class=\"attr\">portNumber:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">portName:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">          <span class=\"attr\">gateway:</span> <span class=\"string\">shaoyu-test</span></span><br><span class=\"line\">          <span class=\"attr\">vhost:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">www.example.com:8080</span></span><br><span class=\"line\">            <span class=\"attr\">route:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">example-app</span></span><br><span class=\"line\">              <span class=\"attr\">action:</span> <span class=\"string\">oneof(INSERT_BEFORE,ROUTE,REDIRECT,DIRECT_RESPONSE)</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span></span><br><span class=\"line\">      <span class=\"attr\">patch:</span></span><br><span class=\"line\">        <span class=\"attr\">operation:</span> <span class=\"string\">INSERT_BEFORE</span></span><br><span class=\"line\">        <span class=\"attr\">value:</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>configPatch的类型</li>\n</ol>\n<h2 id=\"rds-envoyfilter-patch\"><a href=\"#rds-envoyfilter-patch\" class=\"headerlink\" title=\"rds envoyfilter patch\"></a>rds envoyfilter patch</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历routeNames生成对应的routeConfig，针对每一个routeConfig patch envoyfilter</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, routeName := <span class=\"keyword\">range</span> routeNames &#123;</span><br><span class=\"line\">  rc := configgen.buildGatewayHTTPRouteConfig(node, push, routeName)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> rc != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">     rc = envoyfilter.ApplyRouteConfigurationPatches(networking.EnvoyFilter_GATEWAY, node, push, rc)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    rc = &amp;route.RouteConfiguration&#123;</span><br><span class=\"line\">           Name:             routeName,</span><br><span class=\"line\">           VirtualHosts:     []*route.VirtualHost&#123;&#125;,</span><br><span class=\"line\">           ValidateClusters: proto.BoolFalse,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  routeConfigurations = <span class=\"built_in\">append</span>(routeConfigurations, rc)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>envoyfilter的patch是遍历的routeName</li>\n<li>如果一个vs既有https又有http的入口，那在patch envoyfilter的时候，一个vs下面的所有的route都会被遍历</li>\n</ol>\n<h2 id=\"patch是如何做的\"><a href=\"#patch是如何做的\" class=\"headerlink\" title=\"patch是如何做的\"></a>patch是如何做的</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ApplyRouteConfigurationPatches</span><span class=\"params\">(patchContext networking.EnvoyFilter_PatchContext,proxy *model.Proxy,push *model.PushContext,routeConfiguration *route.RouteConfiguration)</span> <span class=\"params\">(out *route.RouteConfiguration)</span></span> &#123;</span><br><span class=\"line\">\tout = routeConfiguration</span><br><span class=\"line\">\t<span class=\"comment\">// 从pushContext中，根据proxy的信息过滤所有符合条件的envoyfilter</span></span><br><span class=\"line\">\tefw := push.EnvoyFilters(proxy)</span><br><span class=\"line\">\t<span class=\"comment\">// only merge is applicable for route configuration.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tdoVirtualHostListOperation(patchContext, efw.Patches, routeConfiguration)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> routeConfiguration</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doVirtualHostListOperation</span><span class=\"params\">(patchContext networking.EnvoyFilter_PatchContext, patches <span class=\"keyword\">map</span>[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper, routeConfiguration *route.RouteConfiguration)</span></span> &#123;</span><br><span class=\"line\">virtualHostsRemoved := <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// first do removes/merges</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, vhost := <span class=\"keyword\">range</span> routeConfiguration.VirtualHosts &#123;</span><br><span class=\"line\">        doVirtualHostOperation(patchContext, patches, routeConfiguration, vhost, &amp;virtualHostsRemoved)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// envoyFilter type VIRTUAL_HOST add and remove</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doVirtualHostOperation</span><span class=\"params\">(patchContext networking.EnvoyFilter_PatchContext, patches <span class=\"keyword\">map</span>[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper, routeConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost, virtualHostRemoved *<span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 遍历envoyfilter，取出类型是EnvoyFilter_VIRTUAL_HOST，类型是merge</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, cp := <span class=\"keyword\">range</span> patches[networking.EnvoyFilter_VIRTUAL_HOST] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> commonConditionMatch(patchContext, cp) &amp;&amp; routeConfigurationMatch(patchContext, routeConfiguration, cp) &amp;&amp; virtualHostMatch(virtualHost, cp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> cp.Operation == networking.EnvoyFilter_Patch_REMOVE &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cp.Operation == networking.EnvoyFilter_Patch_MERGE &#123;</span><br><span class=\"line\">        proto.Merge(virtualHost, cp.Value)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 针对每一条路由，执行patch</span></span><br><span class=\"line\">    doHTTPRouteListOperation(patchContext, patches, routeConfiguration, virtualHost)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doHTTPRouteListOperation</span><span class=\"params\">(patchContext networking.EnvoyFilter_PatchContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">patches <span class=\"keyword\">map</span>[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">routeConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost)</span></span> &#123;</span><br><span class=\"line\">    routesRemoved := <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历每一条路由，进行patch，patches是通过proxy和routeName以及virtualHost(optional)关联出来的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index := <span class=\"keyword\">range</span> virtualHost.Routes &#123;</span><br><span class=\"line\">        doHTTPRouteOperation(patchContext, patches, routeConfiguration, virtualHost, index, &amp;routesRemoved)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// now for the adds and remove</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doHTTPRouteOperation</span><span class=\"params\">(patchContext networking.EnvoyFilter_PatchContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tpatches <span class=\"keyword\">map</span>[networking.EnvoyFilter_ApplyTo][]*model.EnvoyFilterConfigPatchWrapper,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\trouteConfiguration *route.RouteConfiguration, virtualHost *route.VirtualHost, routeIndex <span class=\"keyword\">int</span>, routesRemoved *<span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, cp := <span class=\"keyword\">range</span> patches[networking.EnvoyFilter_HTTP_ROUTE] &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将符合条件的envoyfilter patch到route上</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> commonConditionMatch(patchContext, cp) &amp;&amp;</span><br><span class=\"line\">\t\t\trouteConfigurationMatch(patchContext, routeConfiguration, cp) &amp;&amp;</span><br><span class=\"line\">\t\t\tvirtualHostMatch(virtualHost, cp) &amp;&amp;</span><br><span class=\"line\">\t\t\trouteMatch(virtualHost.Routes[routeIndex], cp) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// different virtualHosts may share same routes pointer</span></span><br><span class=\"line\">\t\t\tvirtualHost.Routes = cloneVhostRoutes(virtualHost.Routes)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> cp.Operation == networking.EnvoyFilter_Patch_REMOVE &#123;</span><br><span class=\"line\">\t\t\t\tvirtualHost.Routes[routeIndex] = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t\t*routesRemoved = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cp.Operation == networking.EnvoyFilter_Patch_MERGE &#123;</span><br><span class=\"line\">\t\t\t\tproto.Merge(virtualHost.Routes[routeIndex], cp.Value)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>envoyfilter的灵活性很强，但是使用起来还是有点痛苦的。</p>\n<p>将routes的列表和patch的列表做匹配，找到每个route需要的patch，现在有的实现上，近似于两层的循环。 在route和envoyfilter量大的情况下，patch的速度会严重影响rds build的耗时。</p>\n<p>同理针对cluster的patch，也有这样的问题</p>\n<ol>\n<li>根据使用场景，对envoyfilter做预处理，可以根据route可以通过近似O(1)的时间复杂度去get到需要patch的filter</li>\n<li>遍历全量的route也是相对比较耗时的，需要进步一步的优化</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}